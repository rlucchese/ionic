{"version":3,"file":"node_modules_capacitor_filesystem_dist_esm_web_js.js","mappings":"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","sources":["./node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin, buildRequestInit } from '@capacitor/core';\nimport { Encoding } from './definitions';\nfunction resolve(path) {\n    const posix = path.split('/').filter((item) => item !== '.');\n    const newPosix = [];\n    posix.forEach((item) => {\n        if (item === '..' && newPosix.length > 0 && newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return parent !== children && pathsA.every((value, index) => value === pathsB[index]);\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n        /**\n         * Function that performs a http request to a server and downloads the file to the specified destination\n         *\n         * @deprecated Use the @capacitor/file-transfer plugin instead.\n         * @param options the options for the download operation\n         * @returns a promise that resolves with the download file result\n         */\n        this.downloadFile = async (options) => {\n            var _a, _b;\n            const requestInit = buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!options.progress)\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                const chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                const allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            const result = await this.writeFile({\n                path: options.path,\n                directory: (_a = options.directory) !== null && _a !== void 0 ? _a : undefined,\n                recursive: (_b = options.recursive) !== null && _b !== void 0 ? _b : false,\n                data: blob,\n            });\n            return { path: result.uri, blob };\n        };\n    }\n    readFileInChunks(_options, _callback) {\n        throw this.unavailable('Method not implemented.');\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding && !(data instanceof Blob)) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data instanceof Blob ? data.size : data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content instanceof Blob) {\n                throw Error('The occupied entry contains a Blob object which cannot be appended to.');\n            }\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            name: entry.path.substring(path.length + 1),\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                let encoding;\n                if (!(file.data instanceof Blob) && !this.isBase64String(file.data)) {\n                    encoding = Encoding.UTF8;\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                    encoding: encoding,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename.name}`,\n                        to: `${to}/${filename.name}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n"],"names":["WebPlugin","buildRequestInit","Encoding","resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","constructor","_this","arguments","this","DB_VERSION","DB_NAME","_writeCmds","downloadFile","_ref","_asyncToGenerator","options","_a","_b","requestInit","webFetchExtra","response","fetch","url","blob","progress","body","Blob","reader","getReader","bytes","chunks","contentType","headers","get","contentLength","parseInt","done","read","status","notifyListeners","allChunks","Uint8Array","position","chunk","set","buffer","type","undefined","result","writeFile","directory","recursive","data","uri","_x","apply","readFileInChunks","_options","_callback","unavailable","initDb","_this2","_db","window","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","onerror","error","onblocked","console","warn","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","_this3","readFlag","indexOf","then","conn","tx","transaction","objectStore","req","dbIndexRequest","indexName","_this4","getPath","uriPath","cleanedUriPath","replace","fsPath","clear","_this5","readFile","_this6","entry","Error","content","_this7","encoding","doRecursive","occupiedEntry","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","appendFile","_this8","btoa","atob","deleteFile","_this9","entries","IDBKeyRange","only","_this0","depth","match","rmdir","_this1","fullPath","readDirResult","readdir","files","entryPath","name","entryObj","stat","_this10","all","map","_ref2","e","subEntry","substring","_x2","getUri","_this11","_this12","rename","_this13","_copy","copy","_this14","requestPermissions","publicStorage","checkPermissions","_x3","_this15","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","_ref3","_x4","_x5","_x6","file","UTF8","writeResult","contents","filename","str","err","_debug"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}